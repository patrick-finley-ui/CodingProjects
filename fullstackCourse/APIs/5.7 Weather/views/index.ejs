<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather App</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/styles/main.css">
    <style>
        .weather-card {
            background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
            color: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .weather-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
        }

        .temp-display {
            font-size: 3rem;
            font-weight: bold;
        }

        .weather-detail {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 1rem;
            margin: 0.5rem 0;
        }

        .location-input {
            border-radius: 25px;
            padding: 12px 20px;
        }

        .btn-custom {
            border-radius: 25px;
            padding: 12px 30px;
            font-weight: 600;
        }

        .divider {
            text-align: center;
            margin: 2rem 0;
            color: #6c757d;
        }

        .divider::before {
            content: '';
            display: inline-block;
            width: 100px;
            height: 1px;
            background: #dee2e6;
            margin-right: 10px;
            vertical-align: middle;
        }

        .divider::after {
            content: '';
            display: inline-block;
            width: 100px;
            height: 1px;
            background: #dee2e6;
            margin-left: 10px;
            vertical-align: middle;
        }
    </style>
</head>

<body class="bg-light">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-6">
                <div class="text-center mb-5">
                    <h1 class="display-4 fw-bold text-primary">
                        <i class="bi bi-cloud-sun"></i> Weather App
                    </h1>
                    <p class="lead text-muted">Get current weather conditions for any location</p>
                </div>

                <!-- Search Form -->
                <div class="card shadow-sm mb-4">
                    <div class="card-body p-4">
                        <form id="myForm" method="post">
                            <div class="mb-3">
                                <label for="locationInput" class="form-label fw-semibold">Enter City Name:</label>
                                <input type="text" id="locationInput" name="location"
                                    class="form-control location-input" placeholder="e.g., New York, London, Tokyo">
                            </div>
                            <div class="d-grid">
                                <button id="get" type="submit" formaction="/get-weather"
                                    class="btn btn-primary btn-custom">
                                    <i class="bi bi-search"></i> Get Weather
                                </button>
                            </div>
                        </form>

                        <div class="divider">
                            <span>OR</span>
                        </div>

                        <div class="d-grid">
                            <button id="getCurrentLocation" type="button" class="btn btn-outline-primary btn-custom">
                                <i class="bi bi-geo-alt"></i> Use Current Location
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Loading Indicator -->
                <div id="loading" class="text-center" style="display: none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Getting your location...</p>
                </div>

                <!-- Weather Display -->
                <% if (locals.content){ %>
                    <% let weatherData; try { weatherData=JSON.parse(content); } catch(e) { weatherData=null; } %>
                        <% if (weatherData) { %>
                            <!-- Debug: Print weather data structure -->

                            <div class="weather-card p-4 mb-4">
                                <div class="row align-items-center">
                                    <div class="col-md-6 text-center">
                                        <div class="weather-icon">
                                            <% const weatherMain=weatherData.current.weather[0].main.toLowerCase(); let
                                                iconClass='bi-cloud' ; if (weatherMain.includes('clear'))
                                                iconClass='bi-sun' ; else if (weatherMain.includes('cloud'))
                                                iconClass='bi-cloud' ; else if (weatherMain.includes('rain'))
                                                iconClass='bi-cloud-rain' ; else if (weatherMain.includes('snow'))
                                                iconClass='bi-snow' ; else if (weatherMain.includes('thunder'))
                                                iconClass='bi-lightning' ; else if (weatherMain.includes('mist') ||
                                                weatherMain.includes('fog')) iconClass='bi-cloud-fog' ; %>
                                                <i class="bi <%= iconClass %>"></i>
                                        </div>
                                        <div class="temp-display">
                                            <%= Math.round(weatherData.current.temp) %>°F
                                        </div>
                                        <% if (weatherData.daily && weatherData.daily[0]) { %>
                                            <h3 class="mb-0">
                                                <%= weatherData.daily[0].temp.min %> / <%= weatherData.daily[0].temp.max
                                                        %>
                                            </h3>
                                            <% } %>

                                                <h3 class="mb-0">
                                                    <%= weatherData.current.weather[0].main %>
                                                </h3>
                                                <p class="mb-0">
                                                    <%= weatherData.current.weather[0].description %>
                                                </p>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="weather-detail">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span><i class="bi bi-thermometer"></i> Feels Like</span>
                                                <strong>
                                                    <%= Math.round(weatherData.current.feels_like) %>°F
                                                </strong>
                                            </div>
                                        </div>
                                        <div class="weather-detail">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span><i class="bi bi-droplet"></i> Humidity</span>
                                                <strong>
                                                    <%= weatherData.current.humidity %>%
                                                </strong>
                                            </div>
                                        </div>
                                        <div class="weather-detail">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span><i class="bi bi-wind"></i> Wind Speed</span>
                                                <strong>
                                                    <%= Math.round(weatherData.current.wind_speed) %> m/s
                                                </strong>
                                            </div>
                                        </div>
                                        <div class="weather-detail">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span><i class="bi bi-sunrise"></i> Sunrise</span>
                                                <strong>
                                                    <%= new Date(weatherData.current.sunrise *
                                                        1000).toLocaleTimeString([], {hour: '2-digit' ,
                                                        minute:'2-digit'}) %>
                                                </strong>
                                            </div>
                                        </div>
                                        <div class="weather-detail">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span><i class="bi bi-sunset"></i> Sunset</span>
                                                <strong>
                                                    <%= new Date(weatherData.current.sunset *
                                                        1000).toLocaleTimeString([], {hour: '2-digit' ,
                                                        minute:'2-digit'}) %>
                                                </strong>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <% } else { %>
                                <div class="alert alert-danger">
                                    <i class="bi bi-exclamation-triangle"></i>
                                    Error parsing weather data. Please try again.
                                </div>
                                <% } %>
                                    <% } %>
            </div>
        </div>
    </div>

    <script>
        async function sendLocationToBackend() {
            if ("geolocation" in navigator) {
                const loadingDiv = document.getElementById('loading');
                loadingDiv.style.display = 'block';

                navigator.geolocation.getCurrentPosition(async (position) => {
                    try {
                        const lat = position.coords.latitude;
                        const lon = position.coords.longitude;

                        // Create JSON data
                        const jsonData = {
                            lat: lat,
                            lon: lon
                        };

                        // Send to backend
                        const response = await fetch('/get-weather-by-location', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(jsonData)
                        });

                        if (response.ok) {
                            // Get the HTML response and replace the page content
                            const html = await response.text();
                            loadingDiv.style.display = 'none';

                            // Replace the current page content with the new HTML
                            document.open();
                            document.write(html);
                            document.close();
                        } else {
                            const errorText = await response.text();
                            throw new Error(`Failed to get weather data: ${errorText}`);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        loadingDiv.style.display = 'none';
                        alert('Error getting weather data: ' + error.message);
                    }
                }, (error) => {
                    console.error('Geolocation error:', error);
                    // Don't show alert for permission denied - user chose not to share location
                    if (error.code !== error.PERMISSION_DENIED) {
                        let errorMessage = 'Error getting location: ';
                        switch (error.code) {
                            case error.POSITION_UNAVAILABLE:
                                errorMessage += 'Location information unavailable.';
                                break;
                            case error.TIMEOUT:
                                errorMessage += 'Location request timed out.';
                                break;
                            default:
                                errorMessage += 'Unknown error occurred.';
                                break;
                        }
                        alert(errorMessage);
                    }
                    loadingDiv.style.display = 'none';
                }, {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 60000
                });
            } else {
                alert('Geolocation is not supported by this browser.');
            }
        }

        // No auto-request - users should explicitly click the location button

        // Add event listener to the button as backup
        document.getElementById('getCurrentLocation').addEventListener('click', sendLocationToBackend);
    </script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>